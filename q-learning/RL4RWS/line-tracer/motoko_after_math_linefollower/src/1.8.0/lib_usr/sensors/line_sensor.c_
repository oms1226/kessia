#include "line_sensor.h"

i32 rgb_calibration_ambient[]  =  {694, 845, 1003, 823, 854, 924, 940, 685, 206};
i32 rgb_calibration_r[] = 				{219, 257, 288, 236, 239, 265, 264, 197, 76};
i32 rgb_calibration_g[] = 				{258, 316, 365, 305, 309, 342, 339, 251, 80};
i32 rgb_calibration_b[] = 				{252, 307, 363, 293, 304, 338, 349, 260, 75};


i16 rgb_w[] = {
				-LINE_STEP_W*4, -LINE_STEP_W*3, -LINE_STEP_W*2, -LINE_STEP_W*1,
				 LINE_STEP_W*1,  LINE_STEP_W*2,  LINE_STEP_W*3,  LINE_STEP_W*4};


struct sLineSensor g_line_sensor;

u32 line_sensor_init(i32 line_sensor_treshold, i32 obstacle_treshold)
{
	u32 i;
	timer_delay_ms(100);

	rgb_init();
	rgb_read();

	/*check correct sensor bus ID*/
	u32 rgb_error_result = 0;
	rgb_i2c_read_reg(RGB_ADDRESS,  RGB_COMMAND|RGB_ID, g_line_sensor.tmp);

	for (i = 0; i < SENSORS_COUNT; i++)
	{
		/* add error as bit mask*/
		if (g_line_sensor.tmp[i] != RGB_ID_VALUE)
			rgb_error_result|= (1<<i);
	}

	/* init g_line_sensor structure*/

	for (i = 0; i < (SENSORS_COUNT-1); i++)
		g_line_sensor.raw_data_dif[i] = 0;

	g_line_sensor.on_line = 0;
	g_line_sensor.line_position = 0;
	g_line_sensor.line_sensor_treshold = line_sensor_treshold;

	g_line_sensor.obstacle = 0;
	g_line_sensor.obstacle_position = 0;
	g_line_sensor.obstacle_treshold = obstacle_treshold;

	line_sensor_read(1);
	return rgb_error_result;
}


struct sLineSensor* line_sensor_get()
{
	return &g_line_sensor;
}

void line_sensor_read(u8 calibration_enabled)
{
	u32 i;
	rgb_read();

	if (calibration_enabled != 0)
		return;


	/* calculate obstacle position */
	g_line_sensor.obstacle_position = (g_line_sensor.obstacle_position*7 + rgb_get()->proximity[SENSORS_COUNT-1])/8;

	if (g_line_sensor.obstacle_position > g_line_sensor.obstacle_treshold)
		g_line_sensor.obstacle = LINE_SENSOR_FLAG_OBSTACLE;
	else
		g_line_sensor.obstacle = 0;

	i32 average_ambient = 0;
	i32 average_r = 0;
	i32 average_g = 0;
	i32 average_b = 0;

	for (i = 0; i < LINE_SENSORS_COUNT; i++)
	{
		rgb_get()->ambient[i]-= rgb_calibration_ambient[i];
		rgb_get()->r[i]-= rgb_calibration_r[i];
		rgb_get()->g[i]-= rgb_calibration_g[i];
		rgb_get()->b[i]-= rgb_calibration_b[i];

		average_ambient+= rgb_get()->ambient[i];
		average_r+= rgb_get()->r[i];
		average_g+= rgb_get()->g[i];
		average_b+= rgb_get()->b[i];
	}

	average_ambient/= LINE_SENSORS_COUNT;
	average_r/=LINE_SENSORS_COUNT;
	average_g/=LINE_SENSORS_COUNT;
	average_b/=LINE_SENSORS_COUNT;

	for (i = 0; i < LINE_SENSORS_COUNT; i++)
	{
		rgb_get()->ambient[i] =  -(rgb_get()->ambient[i] - average_ambient);
		rgb_get()->r[i] = (rgb_get()->r[i] - average_r);
		rgb_get()->g[i] = (rgb_get()->g[i] - average_g);
		rgb_get()->b[i] = (rgb_get()->b[i] - average_b);
	}

	for (i = 0; i < LINE_SENSORS_COUNT; i++)
	{
		g_line_sensor.raw_data_dif[i] = rgb_get()->ambient[i];
	}

	i32 line_position = 0, value = 0, tmp = 0;

	tmp = g_line_sensor.raw_data_dif[3] + g_line_sensor.raw_data_dif[4];
	if (tmp != 0)
	{
		line_position = ( g_line_sensor.raw_data_dif[3]*rgb_w[3] + g_line_sensor.raw_data_dif[4]*rgb_w[4] )/tmp;
		value = ( g_line_sensor.raw_data_dif[3] + g_line_sensor.raw_data_dif[4])/2;
	}

	tmp = g_line_sensor.raw_data_dif[5] + g_line_sensor.raw_data_dif[4];
	if ((tmp != 0) && (g_line_sensor.raw_data_dif[5] > g_line_sensor.line_sensor_treshold))
	{
		line_position = ( g_line_sensor.raw_data_dif[5]*rgb_w[5] + g_line_sensor.raw_data_dif[4]*rgb_w[4] )/tmp;
		value = g_line_sensor.raw_data_dif[5];
	}

	tmp = g_line_sensor.raw_data_dif[2] + g_line_sensor.raw_data_dif[3];
	if ((tmp != 0) && (g_line_sensor.raw_data_dif[2] > g_line_sensor.line_sensor_treshold))
	{
		line_position = ( g_line_sensor.raw_data_dif[2]*rgb_w[2] + g_line_sensor.raw_data_dif[3]*rgb_w[3] )/tmp;
		value = g_line_sensor.raw_data_dif[2];
	}

	tmp = g_line_sensor.raw_data_dif[6] + g_line_sensor.raw_data_dif[5];
	if ((tmp != 0) && (g_line_sensor.raw_data_dif[6] > g_line_sensor.line_sensor_treshold))
	{
			line_position = ( g_line_sensor.raw_data_dif[6]*rgb_w[6] + g_line_sensor.raw_data_dif[5]*rgb_w[5] )/tmp;
			value = g_line_sensor.raw_data_dif[6];
	}

	tmp = g_line_sensor.raw_data_dif[1] + g_line_sensor.raw_data_dif[2];
	if ((tmp != 0) && (g_line_sensor.raw_data_dif[1] > g_line_sensor.line_sensor_treshold))
	{
			line_position = ( g_line_sensor.raw_data_dif[1]*rgb_w[1] + g_line_sensor.raw_data_dif[2]*rgb_w[2] )/tmp;
			value = g_line_sensor.raw_data_dif[1];
	}


	if (g_line_sensor.raw_data_dif[0] > g_line_sensor.line_sensor_treshold)
	{
		line_position = rgb_w[0];
		value = g_line_sensor.raw_data_dif[0];
	}

	if (g_line_sensor.raw_data_dif[7] > g_line_sensor.line_sensor_treshold)
	{
			line_position = rgb_w[7];
			value = g_line_sensor.raw_data_dif[7];
	}

	if (value > g_line_sensor.line_sensor_treshold)
	{
		if (line_position > LINE_MAX)
			line_position = LINE_MAX;

		if (line_position < -LINE_MAX)
			line_position = -LINE_MAX;

			g_line_sensor.line_position = line_position;
			g_line_sensor.on_line = LINE_SENSOR_FLAG_ON_LINE;
	}
	else
	{
		g_line_sensor.on_line = 0;
	}
}
